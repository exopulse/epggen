// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// tmpl/map.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMapTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5d\x6b\xe3\x3a\x10\x7d\xf7\xaf\x18\x02\xf7\x62\x5f\x82\xf3\xde\x4b\x1e\x2e\x17\x5a\x96\xb2\x25\xd0\xb2\x0f\x5b\xca\xa2\xda\xa3\x54\x24\x92\x8d\x24\xa7\x98\xe0\xff\xbe\xe8\xcb\xb1\x5d\x27\x76\xb7\x1f\x0f\x25\x8e\xc6\xe7\x9c\x39\x33\x9a\x49\x49\xb2\x1d\xd9\x22\x1c\x8f\xe9\xc6\x7d\x6c\x9a\x28\x62\xbc\x2c\xa4\x86\x05\xe5\x7a\x11\x45\xab\x95\x39\x7e\xa8\x4b\xfc\x4e\xca\xa6\x01\xc6\xcb\x3d\x72\x14\x5a\x01\x27\x25\x14\x34\x1c\x9b\x33\x8d\x5c\xc1\xeb\x0b\x4a\x84\x1d\xd6\xc0\x94\x39\xd7\x75\x69\x29\x6e\xb1\x6e\x9a\x34\x0a\x8f\x1d\x48\xa1\x51\x52\x92\x21\x1c\x23\x00\x80\xd5\x0a\x36\x95\x06\x85\x5a\x81\xc0\x57\x38\x90\x7d\x85\x40\x0b\x09\xaa\xc4\x8c\x51\x86\xb9\x81\x4f\x61\x23\xf1\xc0\x8a\x4a\xf9\x08\xa6\x40\xa2\xae\xa4\xc0\x3c\xb5\x40\x9b\x4a\xc7\x46\x47\x20\x5f\xfa\xc0\x56\x71\x72\xfa\x18\x05\xea\x7b\x9c\x43\xfd\xf0\xc2\x9c\x01\x12\x29\x4a\x14\xd9\x08\xfd\x3d\xce\xa5\xb7\x3e\xb4\x0a\x6e\x50\xc3\xd6\x28\x38\xc7\x6e\x03\x6f\x06\xe8\x63\xb9\x5c\x33\x91\xdf\x62\x0d\x94\x89\x5c\xd9\x92\x54\x8a\x89\xad\x7d\x46\x09\xb4\x12\x99\x03\xf3\x81\x71\xe7\x20\xee\xc8\x7c\x2e\x8a\x7d\x02\x83\x64\x68\x51\x89\xdc\x1d\xf5\x08\x7f\x38\xd5\x96\xd2\x65\x70\x81\xd4\x06\x4f\xd0\x0e\x5c\x1b\x67\xfe\xbf\xa8\x84\xf6\x05\x00\x51\xf1\x67\x94\xa6\xf9\x5c\x4b\x32\x01\xda\x17\xcc\x51\xdb\xe8\x38\x31\xad\xd7\x41\xe0\x65\xa5\xf1\x1b\xfd\xef\x59\xa1\x98\x6e\x02\x60\x34\x74\x39\x67\xca\xa4\x98\xc2\x5d\x1b\xce\x14\x64\x0e\x30\x87\x03\x23\xe1\xc1\xe6\xa8\x59\x21\xd2\x96\xb6\x92\xd2\xd0\x9d\xe9\xe1\x81\xaa\x41\x0d\xba\xa8\xf1\x48\x27\x8c\x35\x45\x8b\x78\x57\xe8\x6b\xeb\xe4\x20\x53\x46\xdb\x5a\xd9\x22\x8a\x02\x38\xd1\xd9\x8b\x4b\xcf\x08\x20\x22\xf7\xb1\x44\xe2\x3b\xf3\x7c\xfb\xfe\x99\x84\x83\xbc\x4b\xdd\x31\x70\x20\x81\xf8\xe4\xcd\x29\xf4\xcc\xd7\xad\x23\xb6\x09\x83\xf1\x0a\x88\x94\xa4\x36\xcd\x63\xee\xf7\x0e\x6b\xe5\x84\xdd\x62\xad\xe2\x04\x1e\x9f\x02\xd6\xac\xf7\x6d\x9a\x1e\xc1\xc5\x05\x0c\x5f\x96\x26\x72\x23\x31\x47\x4a\xaa\xbd\xee\x4d\x46\xa5\x65\x95\x69\x3f\x16\xb9\xc1\x7b\x0c\xe4\x7d\x84\xd5\xca\xd4\xa6\xf7\x6e\x26\x91\x68\x74\x75\xb5\x7d\x6f\x1c\x1a\x46\xc5\xfd\x11\xe4\x99\xfc\x2d\xfa\x7b\x44\xd2\x91\x5f\x01\x27\x3b\x8c\xc7\xb5\x24\x56\x8d\x65\x8a\x39\xfc\x33\x02\x90\xbc\x6b\x2a\x7b\x41\xa5\xc4\x03\x5c\xad\x81\xa7\xfc\x71\x87\xf5\x93\x73\x3e\x3c\xc1\xda\x21\x44\x5d\xf1\xe6\x95\x69\x2d\xef\x1c\xd1\xa1\x12\x97\x88\xf9\x34\xeb\x85\xd1\xdd\xaf\x40\x9b\xef\x24\xe4\x07\x07\xb8\xa7\x35\x33\x6e\x87\x75\x70\xe1\x6a\x0d\x92\x88\x2d\x1a\x1d\x3e\xc2\xfc\xb5\xf3\xc1\x4d\xe6\xa4\x73\xd4\xd1\x6e\x71\xb4\xac\xb0\x3d\x6c\x22\xf7\xbf\x9b\xe1\x0d\xea\x20\xe8\x27\xca\xc2\xad\x83\x64\x09\x94\xec\x15\xce\x4b\xfb\xa3\x2b\xa4\x93\xfb\xaf\x4f\xc9\xdc\x9e\xcd\xce\xfd\x8e\x70\xfc\xb3\xe4\x3b\x4b\xac\xdf\x36\x7b\x14\x31\x4f\x79\x32\x07\xe2\x93\xb6\x8b\x17\xc0\x68\xc8\xbe\xd8\x75\x2f\xec\xbf\xe6\xf9\x64\x56\xd7\xa8\xae\x31\xad\xf9\x9e\xd9\xe8\x49\xa6\xaf\x9c\xfb\x66\x7e\xb2\x5f\xbe\x59\xbe\xea\x3a\x9d\x0c\x7b\xd3\x53\x7d\x9e\xe0\xdf\x0c\xf3\x3a\xc0\x93\x0e\xbe\x59\x81\x5e\xab\x59\x92\xb6\xdc\x66\x33\x9c\x4e\x97\x6d\x27\xfa\x5d\xeb\x0d\x39\xe7\x84\x85\x59\x03\x29\x4b\x14\xb9\xa9\xbd\x5a\x42\xdb\x01\xcd\x50\xb5\x9a\xd6\x3b\xb6\x70\x3d\x9f\xdb\xcb\x7d\xd1\x61\x38\x8c\xa8\x9e\x9a\x0c\x1e\xae\x15\xef\x9e\xfd\x4b\x63\x09\xb8\x80\x19\x1b\x4a\x4b\x26\xb6\x71\x62\x7e\x0b\x98\x5f\xd1\xbd\x8b\x4e\xb9\x4e\xef\x4b\xc9\x84\xa6\xf1\xe2\xaf\xc3\x62\x09\xfe\xda\xff\x0e\x00\x00\xff\xff\x9f\x23\x67\xe6\xda\x0d\x00\x00")

func tmplMapTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMapTmpl,
		"tmpl/map.tmpl",
	)
}

func tmplMapTmpl() (*asset, error) {
	bytes, err := tmplMapTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/map.tmpl", size: 3546, mode: os.FileMode(436), modTime: time.Unix(1537448402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/map.tmpl": tmplMapTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"map.tmpl": &bintree{tmplMapTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
